/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.ArrayList;
import java.util.HashMap;
import jdk.internal.org.jline.utils.ShutdownHooks.Task;
import model.Task;

/**
 *
 * @author Rushma
 */
public class TodoList extends javax.swing.JPanel {

    /**
     * Creates new form TodoList
     */
   
    // A HashMap to store tasks for each tutor
    private HashMap<String, ArrayList<Task>> tutorTasks = new HashMap<>();
    
    public TodoList() {
        initComponents();
    }

    // Function to add a task for a specific tutor
    private void addTask(String tutorId) {
        String taskDescription = txtTaskInput.getText(); // Get task description from the input field
        if (!taskDescription.isEmpty()) {
            Task newTask = new Task(generateTaskId(), taskDescription);
            tutorTasks.computeIfAbsent(tutorId, k -> new ArrayList<>()).add(newTask); // Add task to the tutor's task list
            updateTaskList(tutorId);
        }
    }

    // Function to delete a task for a specific tutor
    private void deleteTask(String tutorId) {
        int selectedIndex = jList1.getSelectedIndex(); // Get the selected task index
        if (selectedIndex != -1) {
            tutorTasks.get(tutorId).remove(selectedIndex); // Remove the task from the tutor's task list
            updateTaskList(tutorId);
        }
    }

    // Function to mark a task as complete
    private void markTaskComplete(String tutorId) {
        int selectedIndex = jList1.getSelectedIndex(); // Get the selected task index
        if (selectedIndex != -1) {
            Task task = tutorTasks.get(tutorId).get(selectedIndex);
            task.setCompleted(chkComplete.isSelected()); // Update task completion status based on checkbox
            updateTaskList(tutorId);
        }
    }

    // Function to edit a task description
    private void editTask(String tutorId) {
        int selectedIndex = jList1.getSelectedIndex(); // Get the selected task index
        if (selectedIndex != -1) {
            String newDescription = txtTaskInput.getText(); // Get the new task description from the input field
            Task task = tutorTasks.get(tutorId).get(selectedIndex);
            task.setDescription(newDescription); // Update the task description
            updateTaskList(tutorId);
        }
    }

    // Helper function to update the list of tasks displayed
    private void updateTaskList(String tutorId) {
        ArrayList<Task> tasks = tutorTasks.get(tutorId);
        if (tasks != null) {
            String[] taskDescriptions = new String[tasks.size()];
            for (int i = 0; i < tasks.size(); i++) {
                Task task = tasks.get(i);
                taskDescriptions[i] = (task.isCompleted() ? "[Completed] " : "[Incomplete] ") + task.getDescription();
            }
            jList1.setListData(taskDescriptions); // Update the JList with task descriptions
        }
    }

    // Function to generate a new unique task ID
    private String generateTaskId() {
        return "task_" + System.currentTimeMillis(); // Example: task_1630918232871
    }


    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTaskInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnAddTask = new javax.swing.JButton();
        btnEditTask = new javax.swing.JButton();
        btnDeleteTask = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        chkComplete = new javax.swing.JCheckBox();

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 28)); // NOI18N
        jLabel1.setText("Todo List");

        btnAddTask.setText("Add Task");
        btnAddTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTaskActionPerformed(evt);
            }
        });

        btnEditTask.setText("Edit Task");
        btnEditTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTaskActionPerformed(evt);
            }
        });

        btnDeleteTask.setText("Delete Task");
        btnDeleteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTaskActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        chkComplete.setText("Mark as Complete");
        chkComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCompleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(468, 468, 468)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtTaskInput, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(btnAddTask, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnEditTask, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteTask, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkComplete)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTaskInput, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddTask, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditTask, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteTask, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkComplete))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTaskActionPerformed
        String tutorId = "tutor123"; // Example tutor ID (replace with actual tutor ID)
        deleteTask(tutorId);
    }//GEN-LAST:event_btnDeleteTaskActionPerformed

    private void chkCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCompleteActionPerformed
        String tutorId = "tutor123"; // Example tutor ID (replace with actual tutor ID)
        markTaskComplete(tutorId);
    }//GEN-LAST:event_chkCompleteActionPerformed

    private void btnAddTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTaskActionPerformed
       String tutorId = "tutor123"; // Example tutor ID (replace with actual tutor ID)
        addTask(tutorId);
    }//GEN-LAST:event_btnAddTaskActionPerformed

    private void btnEditTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTaskActionPerformed
         String tutorId = "tutor123"; // Example tutor ID (replace with actual tutor ID)
        editTask(tutorId); 
    }//GEN-LAST:event_btnEditTaskActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTask;
    private javax.swing.JButton btnDeleteTask;
    private javax.swing.JButton btnEditTask;
    private javax.swing.JCheckBox chkComplete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtTaskInput;
    // End of variables declaration//GEN-END:variables
}
